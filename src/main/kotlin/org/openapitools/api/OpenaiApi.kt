/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package org.openapitools.api

import io.swagger.v3.oas.annotations.*
import io.swagger.v3.oas.annotations.enums.*
import io.swagger.v3.oas.annotations.media.*
import io.swagger.v3.oas.annotations.responses.*
import io.swagger.v3.oas.annotations.security.*
import jakarta.validation.Valid
import jakarta.validation.constraints.*
import org.openapitools.model.*
import org.springframework.http.HttpStatus
import org.springframework.http.ResponseEntity
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*

@Validated
@RequestMapping("\${api.base-path:/v1}")
interface OpenaiApi {

    @Operation(
        summary = "Immediately cancel a fine-tune job. ",
        operationId = "cancelFineTune",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = FineTune::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fine-tunes/{fine_tune_id}/cancel"],
            produces = ["application/json"]
    )
    suspend fun cancelFineTune(@Parameter(description = "The ID of the fine-tune job to cancel ", required = true) @PathVariable("fine_tune_id") fineTuneId: kotlin.String): ResponseEntity<FineTune> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions). ",
        operationId = "createAnswer",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateAnswerResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/answers"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createAnswer(@Parameter(description = "", required = true) @Valid @RequestBody createAnswerRequest: CreateAnswerRequest): ResponseEntity<CreateAnswerResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases. ",
        operationId = "createClassification",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateClassificationResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/classifications"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createClassification(@Parameter(description = "", required = true) @Valid @RequestBody createClassificationRequest: CreateClassificationRequest): ResponseEntity<CreateClassificationResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates a completion for the provided prompt and parameters",
        operationId = "createCompletion",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateCompletionResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/completions"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createCompletion(@Parameter(description = "", required = true) @Valid @RequestBody createCompletionRequest: CreateCompletionRequest): ResponseEntity<CreateCompletionResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates a new edit for the provided input, instruction, and parameters",
        operationId = "createEdit",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateEditResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/edits"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createEdit(@Parameter(description = "", required = true) @Valid @RequestBody createEditRequest: CreateEditRequest): ResponseEntity<CreateEditResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates an embedding vector representing the input text.",
        operationId = "createEmbedding",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateEmbeddingResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/embeddings"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createEmbedding(@Parameter(description = "", required = true) @Valid @RequestBody createEmbeddingRequest: CreateEmbeddingRequest): ResponseEntity<CreateEmbeddingResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ",
        operationId = "createFile",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = OpenAIFile::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/files"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    suspend fun createFile(@Parameter(description = "file detail") @Valid @RequestPart("file") file: org.springframework.core.io.Resource,@Parameter(description = "The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ", required = true) @RequestParam(value = "purpose", required = true) purpose: kotlin.String ): ResponseEntity<OpenAIFile> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        operationId = "createFineTune",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = FineTune::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/fine-tunes"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createFineTune(@Parameter(description = "", required = true) @Valid @RequestBody createFineTuneRequest: CreateFineTuneRequest): ResponseEntity<FineTune> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates an image given a prompt.",
        operationId = "createImage",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ImagesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/images/generations"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createImage(@Parameter(description = "", required = true) @Valid @RequestBody createImageRequest: CreateImageRequest): ResponseEntity<ImagesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates an edited or extended image given an original image and a prompt.",
        operationId = "createImageEdit",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ImagesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/images/edits"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    suspend fun createImageEdit(@Parameter(description = "file detail") @Valid @RequestPart("file") image: org.springframework.core.io.Resource,@Parameter(description = "A text description of the desired image(s). The maximum length is 1000 characters.", required = true) @RequestParam(value = "prompt", required = true) prompt: kotlin.String ,@Parameter(description = "file detail") @Valid @RequestPart("file") mask: org.springframework.core.io.Resource?,@Parameter(description = "The number of images to generate. Must be between 1 and 10.", schema = Schema(defaultValue = "1")) @RequestParam(value = "n", required = false) n: kotlin.Int ,@Parameter(description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.", schema = Schema(allowableValues = ["256x256", "512x512", "1024x1024"], defaultValue = "1024x1024")) @RequestParam(value = "size", required = false) size: kotlin.String ,@Parameter(description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`.", schema = Schema(allowableValues = ["url", "b64_json"], defaultValue = "url")) @RequestParam(value = "response_format", required = false) responseFormat: kotlin.String ,@Parameter(description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ") @RequestParam(value = "user", required = false) user: kotlin.String? ): ResponseEntity<ImagesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Creates a variation of a given image.",
        operationId = "createImageVariation",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ImagesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/images/variations"],
            produces = ["application/json"],
            consumes = ["multipart/form-data"]
    )
    suspend fun createImageVariation(@Parameter(description = "file detail") @Valid @RequestPart("file") image: org.springframework.core.io.Resource,@Parameter(description = "The number of images to generate. Must be between 1 and 10.", schema = Schema(defaultValue = "1")) @RequestParam(value = "n", required = false) n: kotlin.Int ,@Parameter(description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.", schema = Schema(allowableValues = ["256x256", "512x512", "1024x1024"], defaultValue = "1024x1024")) @RequestParam(value = "size", required = false) size: kotlin.String ,@Parameter(description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`.", schema = Schema(allowableValues = ["url", "b64_json"], defaultValue = "url")) @RequestParam(value = "response_format", required = false) responseFormat: kotlin.String ,@Parameter(description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). ") @RequestParam(value = "user", required = false) user: kotlin.String? ): ResponseEntity<ImagesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Classifies if text violates OpenAI's Content Policy",
        operationId = "createModeration",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateModerationResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/moderations"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createModeration(@Parameter(description = "", required = true) @Valid @RequestBody createModerationRequest: CreateModerationRequest): ResponseEntity<CreateModerationResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query. ",
        operationId = "createSearch",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = CreateSearchResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/engines/{engine_id}/search"],
            produces = ["application/json"],
            consumes = ["application/json"]
    )
    suspend fun createSearch(@Parameter(description = "The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`.", required = true) @PathVariable("engine_id") engineId: kotlin.String,@Parameter(description = "", required = true) @Valid @RequestBody createSearchRequest: CreateSearchRequest): ResponseEntity<CreateSearchResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Delete a file.",
        operationId = "deleteFile",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = DeleteFileResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/files/{file_id}"],
            produces = ["application/json"]
    )
    suspend fun deleteFile(@Parameter(description = "The ID of the file to use for this request", required = true) @PathVariable("file_id") fileId: kotlin.String): ResponseEntity<DeleteFileResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Delete a fine-tuned model. You must have the Owner role in your organization.",
        operationId = "deleteModel",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = DeleteModelResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/models/{model}"],
            produces = ["application/json"]
    )
    suspend fun deleteModel(@Parameter(description = "The model to delete", required = true) @PathVariable("model") model: kotlin.String): ResponseEntity<DeleteModelResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Returns the contents of the specified file",
        operationId = "downloadFile",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = kotlin.String::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/files/{file_id}/content"],
            produces = ["application/json"]
    )
    suspend fun downloadFile(@Parameter(description = "The ID of the file to use for this request", required = true) @PathVariable("file_id") fileId: kotlin.String): ResponseEntity<kotlin.String> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.",
        operationId = "listEngines",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListEnginesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/engines"],
            produces = ["application/json"]
    )
    suspend fun listEngines(): ResponseEntity<ListEnginesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Returns a list of files that belong to the user's organization.",
        operationId = "listFiles",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListFilesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/files"],
            produces = ["application/json"]
    )
    suspend fun listFiles(): ResponseEntity<ListFilesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Get fine-grained status updates for a fine-tune job. ",
        operationId = "listFineTuneEvents",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListFineTuneEventsResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fine-tunes/{fine_tune_id}/events"],
            produces = ["application/json"]
    )
    suspend fun listFineTuneEvents(@Parameter(description = "The ID of the fine-tune job to get events for. ", required = true) @PathVariable("fine_tune_id") fineTuneId: kotlin.String,@Parameter(description = "Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ", schema = Schema(defaultValue = "false")) @Valid @RequestParam(value = "stream", required = false, defaultValue = "false") stream: kotlin.Boolean): ResponseEntity<ListFineTuneEventsResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "List your organization's fine-tuning jobs ",
        operationId = "listFineTunes",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListFineTunesResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fine-tunes"],
            produces = ["application/json"]
    )
    suspend fun listFineTunes(): ResponseEntity<ListFineTunesResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        operationId = "listModels",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = ListModelsResponse::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/models"],
            produces = ["application/json"]
    )
    suspend fun listModels(): ResponseEntity<ListModelsResponse> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Retrieves a model instance, providing basic information about it such as the owner and availability.",
        operationId = "retrieveEngine",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = Engine::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/engines/{engine_id}"],
            produces = ["application/json"]
    )
    suspend fun retrieveEngine(@Parameter(description = "The ID of the engine to use for this request ", required = true) @PathVariable("engine_id") engineId: kotlin.String): ResponseEntity<Engine> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Returns information about a specific file.",
        operationId = "retrieveFile",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = OpenAIFile::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/files/{file_id}"],
            produces = ["application/json"]
    )
    suspend fun retrieveFile(@Parameter(description = "The ID of the file to use for this request", required = true) @PathVariable("file_id") fileId: kotlin.String): ResponseEntity<OpenAIFile> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        operationId = "retrieveFineTune",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = FineTune::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/fine-tunes/{fine_tune_id}"],
            produces = ["application/json"]
    )
    suspend fun retrieveFineTune(@Parameter(description = "The ID of the fine-tune job ", required = true) @PathVariable("fine_tune_id") fineTuneId: kotlin.String): ResponseEntity<FineTune> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }

    @Operation(
        summary = "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
        operationId = "retrieveModel",
        description = "",
        responses = [
            ApiResponse(responseCode = "200", description = "OK", content = [Content(schema = Schema(implementation = Model::class))])
        ]
    )
    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/models/{model}"],
            produces = ["application/json"]
    )
    suspend fun retrieveModel(@Parameter(description = "The ID of the model to use for this request", required = true) @PathVariable("model") model: kotlin.String): ResponseEntity<Model> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
